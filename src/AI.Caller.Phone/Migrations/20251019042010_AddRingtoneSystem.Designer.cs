// <auto-generated />
using System;
using AI.Caller.Phone;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI.Caller.Phone.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251019042010_AddRingtoneSystem")]
    partial class AddRingtoneSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("AI.Caller.Phone.Entities.AICustomerServiceSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutoAnswerDelayMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultSpeakerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DefaultSpeed")
                        .HasColumnType("REAL");

                    b.Property<int?>("DefaultTtsTemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultWelcomeScript")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AICustomerServiceSettings");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.BatchCallJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FailureReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoredFilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TtsTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("BatchCallJobs");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.CallLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatchCallJobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FailureReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("InitiationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolvedContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BatchCallJobId");

                    b.ToTable("CallLogs");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_Contacts_PhoneNumber");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Contacts_UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.Ringtone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsSystem")
                        .HasDatabaseName("IX_Ringtones_IsSystem");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Ringtones_Type");

                    b.HasIndex("UploadedBy")
                        .HasDatabaseName("IX_Ringtones_UploadedBy");

                    b.ToTable("Ringtones");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.SipAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("SipPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SipServer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SipUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_SipAccounts_IsActive");

                    b.HasIndex("SipUsername")
                        .IsUnique()
                        .HasDatabaseName("IX_SipAccounts_SipUsername");

                    b.ToTable("SipAccounts");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.SystemRingtoneSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultIncomingRingtoneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultRingbackToneId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DefaultIncomingRingtoneId");

                    b.HasIndex("DefaultRingbackToneId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SystemRingtoneSettings");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.TtsTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("包含占位符的内容模板, e.g., '您好{CustomerName}，欢迎使用我们的服务。'");

                    b.Property<string>("EndingSpeech")
                        .HasColumnType("TEXT")
                        .HasComment("循环播放结束后，最终播报一次的内容。");

                    b.Property<bool>("HangupAfterPlay")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PauseBetweenPlaysInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayCount")
                        .HasColumnType("INTEGER");

                    b.Property<float>("SpeechRate")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TtsTemplates");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.TtsVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("在模板中使用的占位符，不含大括号, e.g., 'CustomerName'");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TtsVariables");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoRecording")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableAI")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegisteredAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SipAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SipRegistered")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SipAccountId")
                        .HasDatabaseName("IX_Users_SipAccountId");

                    b.HasIndex("SipRegistered")
                        .HasDatabaseName("IX_Users_SipRegistered");

                    b.HasIndex("Username")
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AutoRecording = false,
                            EnableAI = false,
                            IsAdmin = false,
                            Password = "password123",
                            SipRegistered = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.UserRingtoneSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int?>("IncomingRingtoneId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RingbackToneId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IncomingRingtoneId");

                    b.HasIndex("RingbackToneId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRingtoneSettings_UserId");

                    b.ToTable("UserRingtoneSettings");
                });

            modelBuilder.Entity("AI.Caller.Phone.Models.Recording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SipUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_Recordings_StartTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Recordings_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Recordings_UserId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("TtsTemplateVariable", b =>
                {
                    b.Property<int>("TtsTemplatesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VariablesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TtsTemplatesId", "VariablesId");

                    b.HasIndex("VariablesId");

                    b.ToTable("TtsTemplateVariable");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.BatchCallJob", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.CallLog", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.BatchCallJob", "BatchCallJob")
                        .WithMany("CallLogs")
                        .HasForeignKey("BatchCallJobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BatchCallJob");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.Contact", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.User", null)
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AI.Caller.Phone.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.Ringtone", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.User", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.SystemRingtoneSettings", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.Ringtone", "DefaultIncomingRingtone")
                        .WithMany()
                        .HasForeignKey("DefaultIncomingRingtoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AI.Caller.Phone.Entities.Ringtone", "DefaultRingbackTone")
                        .WithMany()
                        .HasForeignKey("DefaultRingbackToneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AI.Caller.Phone.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DefaultIncomingRingtone");

                    b.Navigation("DefaultRingbackTone");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.User", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.SipAccount", "SipAccount")
                        .WithMany("Users")
                        .HasForeignKey("SipAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SipAccount");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.UserRingtoneSettings", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.Ringtone", "IncomingRingtone")
                        .WithMany()
                        .HasForeignKey("IncomingRingtoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AI.Caller.Phone.Entities.Ringtone", "RingbackTone")
                        .WithMany()
                        .HasForeignKey("RingbackToneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AI.Caller.Phone.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomingRingtone");

                    b.Navigation("RingbackTone");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TtsTemplateVariable", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.TtsTemplate", null)
                        .WithMany()
                        .HasForeignKey("TtsTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AI.Caller.Phone.Entities.TtsVariable", null)
                        .WithMany()
                        .HasForeignKey("VariablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.BatchCallJob", b =>
                {
                    b.Navigation("CallLogs");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.SipAccount", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.User", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
