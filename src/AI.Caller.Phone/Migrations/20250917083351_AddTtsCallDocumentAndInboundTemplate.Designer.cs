// <auto-generated />
using System;
using AI.Caller.Phone;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AI.Caller.Phone.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917083351_AddTtsCallDocumentAndInboundTemplate")]
    partial class AddTtsCallDocumentAndInboundTemplate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("AI.Caller.Phone.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_Contacts_PhoneNumber");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Contacts_UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.SipAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("SipPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SipServer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SipUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_SipAccounts_IsActive");

                    b.HasIndex("SipUsername")
                        .IsUnique()
                        .HasDatabaseName("IX_SipAccounts_SipUsername");

                    b.ToTable("SipAccounts");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.SipSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SipServer")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SipSettings");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoRecording")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegisteredAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SipAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SipRegistered")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SipAccountId")
                        .HasDatabaseName("IX_Users_SipAccountId");

                    b.HasIndex("SipRegistered")
                        .HasDatabaseName("IX_Users_SipRegistered");

                    b.HasIndex("Username")
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AutoRecording = false,
                            IsAdmin = false,
                            Password = "password123",
                            SipRegistered = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AI.Caller.Phone.Models.InboundTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseRules")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WelcomeScript")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_InboundTemplates_IsActive");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("IX_InboundTemplates_IsDefault");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_InboundTemplates_UserId");

                    b.ToTable("InboundTemplates");
                });

            modelBuilder.Entity("AI.Caller.Phone.Models.Recording", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SipUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_Recordings_StartTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Recordings_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Recordings_UserId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("AI.Caller.Phone.Models.TtsCallDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedCalls")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("FailedCalls")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalRecords")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TtsCallDocuments_Status");

                    b.HasIndex("UploadTime")
                        .HasDatabaseName("IX_TtsCallDocuments_UploadTime");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_TtsCallDocuments_UserId");

                    b.ToTable("TtsCallDocuments");
                });

            modelBuilder.Entity("AI.Caller.Phone.Models.TtsCallRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressTemplate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CallStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CallTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TtsContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CallStatus")
                        .HasDatabaseName("IX_TtsCallRecords_CallStatus");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("IX_TtsCallRecords_DocumentId");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_TtsCallRecords_PhoneNumber");

                    b.ToTable("TtsCallRecords");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.Contact", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.User", null)
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AI.Caller.Phone.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.User", b =>
                {
                    b.HasOne("AI.Caller.Phone.Entities.SipAccount", "SipAccount")
                        .WithMany("Users")
                        .HasForeignKey("SipAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SipAccount");
                });

            modelBuilder.Entity("AI.Caller.Phone.Models.TtsCallRecord", b =>
                {
                    b.HasOne("AI.Caller.Phone.Models.TtsCallDocument", "Document")
                        .WithMany("CallRecords")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.SipAccount", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AI.Caller.Phone.Entities.User", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("AI.Caller.Phone.Models.TtsCallDocument", b =>
                {
                    b.Navigation("CallRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
